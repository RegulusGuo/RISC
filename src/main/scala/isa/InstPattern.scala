package isa

import chisel3._ 
import chisel3.util._ 

object ISA {

    // RV32I instructions (delete SLLI, SRLI, SRAI)

    def LUI   = BitPat("b????????????????????_?????_0110111")
    def AUIPC = BitPat("b????????????????????_?????_0010111")

    def JAL   = BitPat("b????????????????????_?????_1101111")
    def JALR  = BitPat("b????????????_?????_000_?????_1100111")

    def BEQ   = BitPat("b???????_?????_?????_000_?????_1100011")
    def BNE   = BitPat("b???????_?????_?????_001_?????_1100011")
    def BLT   = BitPat("b???????_?????_?????_100_?????_1100011")
    def BGE   = BitPat("b???????_?????_?????_101_?????_1100011")
    def BLTU  = BitPat("b???????_?????_?????_110_?????_1100011")
    def BGEU  = BitPat("b???????_?????_?????_111_?????_1100011")

    def LB    = BitPat("b????????????_?????_000_?????_0000011")
    def LH    = BitPat("b????????????_?????_001_?????_0000011")
    def LW    = BitPat("b????????????_?????_010_?????_0000011")
    def LBU   = BitPat("b????????????_?????_100_?????_0000011")
    def LHU   = BitPat("b????????????_?????_101_?????_0000011")

    def SB    = BitPat("b???????_?????_?????_000_?????_0100011")
    def SH    = BitPat("b???????_?????_?????_001_?????_0100011")
    def SW    = BitPat("b???????_?????_?????_010_?????_0100011")

    def ADDI  = BitPat("b????????????_?????_000_?????_0010011")
    def SLTI  = BitPat("b????????????_?????_010_?????_0010011")
    def SLTIU = BitPat("b????????????_?????_011_?????_0010011")
    def XORI  = BitPat("b????????????_?????_100_?????_0010011")
    def ORI   = BitPat("b????????????_?????_110_?????_0010011")
    def ANDI  = BitPat("b????????????_?????_111_?????_0010011")

    def ADD   = BitPat("b0000000_?????_?????_000_?????_0110011")
    def SUB   = BitPat("b0100000_?????_?????_000_?????_0110011")
    def SLL   = BitPat("b0000000_?????_?????_001_?????_0110011")
    def SLT   = BitPat("b0000000_?????_?????_010_?????_0110011")
    def SLTU  = BitPat("b0000000_?????_?????_011_?????_0110011")
    def XOR   = BitPat("b0000000_?????_?????_100_?????_0110011")
    def SRL   = BitPat("b0000000_?????_?????_101_?????_0110011")
    def SRA   = BitPat("b0100000_?????_?????_101_?????_0110011")
    def OR    = BitPat("b0000000_?????_?????_110_?????_0110011")
    def AND   = BitPat("b0000000_?????_?????_111_?????_0110011")

    // def FENCE         = BitPat("b0000_????_????_00000_000_00000_0001111")

    // def ECALL         = BitPat("b000000000000_00000_000_00000_1110011")
    // def EBREAK        = BitPat("b000000000001_00000_000_00000_1110011")

    // def MRET          = BitPat("b00110000001000000000000001110011")
    // def SRET          = BitPat("b00010000001000000000000001110011")
    // def URET          = BitPat("b00000000001000000000000001110011")

  // RV64I additional instructions compared to RV32I

    def LWU  = BitPat("b????????????_?????_110_?????_0000011")
    def LD   = BitPat("b????????????_?????_011_?????_0000011")

    def SD   = BitPat("b???????_?????_?????_011_?????_0100011")

    def SLLI = BitPat("b000000_??????_?????_001_?????_0010011")
    def SRLI = BitPat("b000000_??????_?????_101_?????_0010011")
    def SRAI = BitPat("b010000_??????_?????_101_?????_0010011")

    def ADDIW = BitPat("b????????????_?????_000_?????_0011011")
    def SLLIW = BitPat("b0000000_?????_?????_001_?????_0011011")
    def SRLIW = BitPat("b0000000_?????_?????_101_?????_0011011")
    def SRAIW = BitPat("b0100000_?????_?????_101_?????_0011011")

    def ADDW  = BitPat("b0000000_?????_?????_000_?????_0111011")
    def SUBW  = BitPat("b0100000_?????_?????_000_?????_0111011")
    def SLLW  = BitPat("b0000000_?????_?????_001_?????_0111011")
    def SRLW  = BitPat("b0000000_?????_?????_101_?????_0111011")
    def SRAW  = BitPat("b0100000_?????_?????_101_?????_0111011")


  // Zifencei standard extension instructions

    //   def FENCEI        = BitPat("b0000_0000_0000_00000_001_00000_0001111")


  // Zicsr standard extension instructions

  def CSRRW         = BitPat("b????????????_?????_001_?????_1110011")
  def CSRRS         = BitPat("b????????????_?????_010_?????_1110011")
  def CSRRC         = BitPat("b????????????_?????_011_?????_1110011")
  def CSRRWI        = BitPat("b????????????_?????_101_?????_1110011")
  def CSRRSI        = BitPat("b????????????_?????_110_?????_1110011")
  def CSRRCI        = BitPat("b????????????_?????_111_?????_1110011")


  // RV32M instructions

  def MUL           = BitPat("b0000001_?????_?????_000_?????_0110011")
  def MULH          = BitPat("b0000001_?????_?????_001_?????_0110011")
  def MULHSU        = BitPat("b0000001_?????_?????_010_?????_0110011")
  def MULHU         = BitPat("b0000001_?????_?????_011_?????_0110011")
  def DIV           = BitPat("b0000001_?????_?????_100_?????_0110011")
  def DIVU          = BitPat("b0000001_?????_?????_101_?????_0110011")
  def REM           = BitPat("b0000001_?????_?????_110_?????_0110011")
  def REMU          = BitPat("b0000001_?????_?????_111_?????_0110011")


  // RV64M addtional instructions compared to RV32M

  def MULW          = BitPat("b0000001_?????_?????_000_?????_0111011")
  def DIVW          = BitPat("b0000001_?????_?????_100_?????_0111011")
  def DIVUW         = BitPat("b0000001_?????_?????_101_?????_0111011")
  def REMW          = BitPat("b0000001_?????_?????_110_?????_0111011")
  def REMUW         = BitPat("b0000001_?????_?????_111_?????_0111011")
}